(**

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

  @stopdocumentation
  @nochecks Not enabled for tests
  @nometrics Not enabled for tests

**)

Unit Test.ProfileViewer.Functions;

Interface

Uses
  TestFramework,
  Windows,
  SysUtils,
  Classes,
  Graphics,
  ProfileViewer.Functions;

Type
  TDGHTestCase = Class(TTestCase)
  Public
    Procedure CheckEquals(dblExpected, dblActual, dblTolerance: Double;
      strMsg: String = ''); Overload;
  End;

  TestApplicationFunctions = Class(TDGHTestCase)
  Published
    Procedure TestCharCount;
    Procedure TestGetField;
    Procedure TestPosOfNthChar;
    Procedure TestCalcColour;
  End;

Implementation

Uses
  Math;

{ TDGHTestCase }

Procedure TDGHTestCase.CheckEquals(dblExpected, dblActual,
  dblTolerance: Double; strMsg: String = '');
Begin
  FCheckCalled := True;
  If Abs(dblExpected - dblActual) >= dblTolerance Then
    FailNotEquals(Format('%1.4f', [dblExpected]), Format('%1.4f', [dblActual]),
      Format('%s : Expected %1.4f, Actual %1.4f (Delta %1.4f)',
      [strMsg, dblExpected, dblActual, Abs(dblExpected - dblActual)]),
      ReturnAddress);
End;

{ TestExportedFunctions }

Procedure TestApplicationFunctions.TestCalcColour;

Const
  iLow: TColor    = $0000FF;
  iMiddle: TColor = $FF0000;
  iHigh: TColor   = $00FF00;

Begin
  CheckEquals($0000FF, CalcColour(05, 10, 50, 90, iLow, iMiddle, iHigh), 'CalcColour 1');
  CheckEquals($0000FF, CalcColour(10, 10, 50, 90, iLow, iMiddle, iHigh), 'CalcColour 2');
  CheckEquals($7F0080, CalcColour(30, 10, 50, 90, iLow, iMiddle, iHigh), 'CalcColour 3');
  CheckEquals($FF0000, CalcColour(50, 10, 50, 90, iLow, iMiddle, iHigh), 'CalcColour 4');
  CheckEquals($7F7F00, CalcColour(70, 10, 50, 90, iLow, iMiddle, iHigh), 'CalcColour 5');
  CheckEquals($00FF00, CalcColour(90, 10, 50, 90, iLow, iMiddle, iHigh), 'CalcColour 6');
  CheckEquals($00FF00, CalcColour(95, 10, 50, 90, iLow, iMiddle, iHigh), 'CalcColour 7');
End;

Procedure TestApplicationFunctions.TestCharCount;
Begin
  CheckEquals(4, CharCount(',', 'First,Second,Third,Fourth,Fifth'));
  CheckEquals(4, CharCount(',', '"First,Second",Third,"Fourth,Fifth"'));
  CheckEquals(4, CharCount(',', 'First,"Second,Third",Fourth,Fifth'));
  CheckEquals(2, CharCount(',', '"First,Second",Third,"Fourth,Fifth"', False));
  CheckEquals(3, CharCount(',', 'First,"Second,Third",Fourth,Fifth', False));
End;

Procedure TestApplicationFunctions.TestGetField;
Begin
  CheckEquals('First', GetField('First,Second,Third,Fourth,Fifth', ',', 1), 'First');
  CheckEquals('Third', GetField('First,Second,Third,Fourth,Fifth', ',', 3), 'Third');
  CheckEquals('Fifth', GetField('First,Second,Third,Fourth,Fifth', ',', 5), 'Third');

  CheckEquals('Third', GetField('"First,Second",Third,"Fourth,Fifth"', ',', 3), 'Fourth');
  CheckEquals('"Fourth,Fifth"', GetField('"First,Second",Third,"Fourth,Fifth"', ',', 3,
    False), 'Fifth');
  CheckEquals('Third"', GetField('First,"Second,Third",Fourth,Fifth"', ',', 3), 'Sixth');
  CheckEquals('Fourth', GetField('First,"Second,Third",Fourth,Fifth"', ',', 3, False),
    'Seventh');
End;

Procedure TestApplicationFunctions.TestPosOfNthChar;
Begin
  CheckEquals(19, PosOfNthChar('First,Second,Third,Fourth,Fifth', ',', 3));
  CheckEquals(21, PosOfNthChar('"First,Second",Third,"Fourth,Fifth"', ',', 3));
  CheckEquals(21, PosOfNthChar('First,"Second,Third",Fourth,Fifth"', ',', 3));
  CheckEquals(21, PosOfNthChar('"First,Second",Third,"Fourth,Fifth"', ',', 2, False));
  CheckEquals(21, PosOfNthChar('First,"Second,Third",Fourth,Fifth"', ',', 2, False));
End;

Initialization
  // Register any test cases with the test runner
  RegisterTest('Exported Functions', TestApplicationFunctions.Suite);
End.
